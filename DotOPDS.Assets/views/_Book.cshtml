@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase<MetaBook>
@functions{
    string FormatAuthor(Author author)
    {
        string format = "";
        if (!string.IsNullOrEmpty(author.FirstName)) format += "{0}";
        if (!string.IsNullOrEmpty(author.MiddleName)) format += " {1}";
        if (!string.IsNullOrEmpty(author.LastName)) format += " {2}";
        return string.Format(format, author.FirstName, author.MiddleName, author.LastName).Trim();
    }
}
@{
    var book = Model.Book;
    string filename = null;
    if (book.Authors.Length > 0)
    {
        filename = string.Format("{0}_{1}-{2}", book.Authors[0].FirstName, book.Authors[0].LastName, book.Title);
    }
    else
    {
        filename = string.Format("{0}", book.Title);
    }
    filename = Helpers.EncodeFileName(filename);
}

@helper Genre(string value)
{
    <a href="/genre/@value">
        <span itemprop="genre">@value</span>
    </a>
}

@helper Author(string value)
{
    <a href="/author/@value">
        <span itemprop="author">@value
    </a>
}

<div class="book" itemscope itemtype="http://schema.org/Book">
    <!-- <img itemprop="cover" class="book-details--cover" src="http://lib.rus.ec/cover/@book.LibId"/> -->
    <div class="book-details"><!-- book-details-img -->
        <h1 itemprop="name" class="book-details--title">@book.Title</h1>

    @if (book.Authors.Length > 0)
    {
        <div class="book-details--author">
            <label class="author-name">
                @if (book.Authors.Length == 1)
                {
                    <text>Автор</text>
                }
                else
                {
                    <text>Авторы</text>
                }
                книги:
            </label>
            @Helpers.LoopWithSeparator(",", book.Authors.Select(s => Author(FormatAuthor(s))))
        </div>
    }

        <div class="book-details--row pull-left">
            <label class="row-label">
                <span>
                @if (book.Genres.Length == 1)
                {
                    <text>жанр:</text>
                }
                else
                {
                    <text>жанры:</text>
                }
                </span>
            </label>
            <span class="row-value">
                @Helpers.LoopWithSeparator(",", book.Genres.Select(s => Genre(s)))
            </span>
        </div>

    @if (!string.IsNullOrEmpty(book.Series))
    {
        <div class="book-details--row pull-left">
            <label class="row-label">
                <span>серия книг:</span>
            </label>
            <span class="row-value">
                <a itemprop="series" href="/series/@book.Series">@book.Series</a>
                @if (@book.SeriesNo != 0)
                {
                    <text>(@book.SeriesNo-я книга)</text>
                }
            </span>
        </div>
    }

    </div>

    <div class="btn-group pull-right download">
        <a class="btn btn-default" href="/download/@(Model.Id)/@filename.@(book.Ext)">Скачать</a>
        @if (Settings.Instance.Converters != null)
        {
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="caret"></span>
            </button>
            <ul class="dropdown-menu">
                @foreach (var conv in Settings.Instance.Converters)
                {
                    <li><a href="/download/@(Model.Id)/@filename.@(conv.Ext)">Скачать в @(conv.Ext.ToUpper())</a></li>
                }
            </ul>
        }
    </div>
</div>
<div class="clearfix"></div>